1. JavaScript 概述
	1. 什么是JavaScript
		简称JS,是一种运行于JS解释器或执行引擎中的脚本代码
		是一种浏览器解释型的语言
		主要用来实现页面的交互与动态效果
	2. JS的组成
		1. 核心语法 -ECMAScript 规范了JS的基本语法
		2. 浏览器对象模型 -BOM
			Browser Object Model,提供了一系列操作浏览器的方法
		3. 文档对象模型 -DOM
			Document Object Model,提供了一系列操作的文档的方法
2. JS使用方式
	1. 在元素标签中绑定JS代码,主要指JS事件
		事件 : 用户在元素上所激发的行为操作(单击)
		语法 :
			<标签 onclick="JS 操作">
			JS 操作如果涉及代码非常多,一般会抽离出来单独写在JS文件中,如果是简单的代码,可以以属性值字符串的形式书写
			et :
				console.log("在控制台中输出一句话");
	2. 将JS代码嵌套在文档中,使用<script></script>标签
		语法 :
			<script>
				JS代码
			</script>
		注意 : <script></script>标签可以书写在文档的任意位置,书写多次,但是不同的位置会影响代码最终的执行效果
		特点 :
			网页加载到标签时就会执行内部的JS代码
		et :
			<script>
				console.log('abc');
				// 在页面中输出,会重写网页主体内容
				document.write('abc');
			</script>
	3. 外部链接
		语法 :
			创建外部的JS文件 .js
			在文档中使用 <script src="JS路径"></script>引入
				src 引入的外部资源是网页加载所必须的一部分,网页在加载src文件时,会等待文件加载完毕再执行后面的代码
				href 网页在加载href文件时,不会等待加载完毕,边加载边向后执行
			注意 : 在JS的引入标签中
				<script src="JS路径"></script>
				不能再书写任何JS代码
		常同操作 :
			1. alert(""); 普通的网页弹框
			2. prompt(""); 接收用户输入的弹框,返回用户输入的内容
			3. document.write("<h1>Hello</h1>"); 
				1.在使用事件方式写入时,会重写网页的内容(事件涉及网页刷新)
				2.可以识别HTML标签,脚本代码可以在文档任何地方书写,如果是普通写入(不涉及事件),区分代码的书写位置,在当前位置中插入,如果是在head中嵌入,内容会作为body的首行内容显示
			4. console.log(); 控制台输出,多用于代码调试 
3. 基础语法
	1. JS是由语句组成的
		1. JS语句可以由运算符,关键字,表达式组成
		2. JS语句必须以英文分号结束;
		3. JS中严格区分大小写
			console.log(); 正确
		4. 所有涉及的标点符号,必须使用英文的
	2. JS中的注释
		1. 单行注释 //
		2. 多行注释 /* 注释文本 */
4. JS的变量与常量
	1. 变量
		1. 创建变量
			1. 先声明,后赋值,使用关键字 var 进行声明
				声明 : var 变量名;
				赋值 : 变量名 = 值;
			2. 声明的同时赋值
				var 变量名 = 值;
				et :
					声明一个变量 uname,取值 "韩梅梅"
						var uname = "韩梅梅";

					输出变量的值
						console.log(uname);
						document.write(uname);
						alert(uname);
		2. 使用注意
			1. 声明变量时,关键字var可以省略,不建议省略,容易出问题
			2. 变量如果只声明未赋值,var a;变量默认值为undefined
		3. 变量名的命名规范
			1. 不能与JS中的关键字和保留字冲突(var default break class function for while do ... name)
			2. 自定义的变量名可以由数字,字母,下划线,$组成,不能使用数字开头
			3. 变量名称严格区分大小写
				var a = 10;
				var A;
			4. 命名尽量有意义些,做到见名知意
			5. 多个单词组成变量名,采用小驼峰标识
		4. 变量的使用方式
			1. 赋值
				赋值符号 =
				作用 : 将赋值符号右边的值赋给左边的变量
			2. 访问
				1. 直接输出
					console.log(a);
				2. 变量出现在赋值符号右边,表示访问变量的值
					var age = 10;
					age = age + 20;
				注意 :
					赋值符号左边只能是变量
	2. 常量
		1. 一经声明就不允许再被修改的数据就是常量
		2. 语法 :
			const 常量名 = 值;
			注意 :
				1. 常量在声明的同时必须赋值
				2. 为了与变量名区分,常量名一般采用全大写的方式
					et :
						const PI = 3.14;
	3. 操作小数位
		保留小数点后 n 位
		toFixed(n);
		使用 :
			var num = 3.1415926;
			var res = num.toFixed(2); //保留当前变量小数点后两位
			或者 num = num.toFixed(2);
5. 数据类型
	1. 基本数据类型 (简单数据类型)
		1. number 类型
			数字类型,表示32位的整数或者是64位的浮点数
			1 字节 = 8 位
			整数占4字节  浮点数占8字节
			1. 整数
				常用的: 十进制表示方法
				八进制: 以数字0开头
					以8位基数,采用0-7八个数字来表示,逢8进1
				十六进制 : 以 0x 为前缀
				注意 :
					使用console.log()输出整数时,不管用哪一种表示,都会转成十进制输出
			2. 小数
				1. 小数点计数法 3.14
				2. 指数计数法   1.5e3
					e表示以10为底
					e后面的数字表示10的次方数
					1.5e3 = 1.5 * 10(3)
		2. 字符串类型
			string 类型,可以由Unicode的字符,数字或标点来组成
			注意 :
				1. 字符串在使用时必须使用''或""引起来
				2. 每个字符都有对应的Unicode码
			1. 查看字符的Unicode码
				var s1 = '张';
				方法 : charCodeAt(index)
				作用 : 用来查看指定位置的字符对应的Unicode编码
				注意 : 
					1. 字符串中的字符都对应有一个下标,参考数组的存储方式,下标从0开始
					2. Unicode编码中前128位与ASC码值一致
					3. 可以查看中文字符对应的Unicode码,如果想把中文的Unicode码值转换成字符,需要先将码值转换为16进制,再进行汉字字符的转换
						转换16进制:
							toString(16);
						16进制字符串转换汉字字符
							"5f20"
							添加\u转义
							var s = "\u5f20";
						注意 :
							不能写 var s = "\u"+"5f20";
							语法错误
					4. 中文范围
						"\u4e00" ~ "\u9fa5"
					5. 转义字符
						\n : 换行
						\t : 制表符
						\" : "
						\' : '
						\\ : \
		3. boolean 布尔类型
			用来表示真或假
				注意 :
					布尔类型表示真或假,是可以参与数学运算的, true = 1 / false = 0
		4. undefined 类型
			1. 变量声明未赋值时,为undefined
			2. 如果访问对象不存在的属性时,也为undefined
		5. null 类型
			空类型
	2. 判断数据类型
		typeof
		使用 :
			var n = "asda";
			console.log(typeof n);
			console.log(typeof(n));

	3. 引用数据类型 (复杂数据类型)
		数组 函数 对象
6. 数据类型转换
	相同数据类型的变量进行运算时,保持数据类型一致
	1. 隐式类型转换 (自动转换)
		1. number + string
			当字符串与其他数据类型相加时, + 表示字符串的拼接,不再是数学运算
			转换规则 : 将非字符串类型的数据转换成字符串之后进行拼接,最终结果为字符串
				et :
					var num = 15;
					var str = "18";
					var r1 = num + str;		//"1518"
					var r2 = 15 + 18 + "18";	//"3318"
					var r3 = "18" + 15 + 18;	//"181518"
		2. boolean + string
			将布尔类型转换为字符串进行拼接
		3. number + boolean
			将布尔类型转换为数字进行数学运算
			true = 1;
			false = 0;
	2. 强制类型转换
		1. toString()
			将任意非字符串类型的数据转换为字符串类型,并返回转换后的结果
			et :
				var n = 100;
				var r = n.toString();
				console.log(typeof n,typeof r);
		2. Number()
			将数字字符串或者是布尔值转换成number类型,如果字符串中包含非数字字符,转换失败,会返回NaN (Not a Number)
			er :
				var r = Number("35.5");   //35.5
				var r2 = Number(true);    //1
				var r3 = Number("18a");   //NaN
		3. parseInt
			解析字符串中的数字,只解析字符串开头中的数字,如果字符串不是以数字开头的,都返回NaN,并且只解析整数
			et :
				var r = parseInt("18.2a");    //18
				var r2 = parseInt("a18");     //NaN
				var r3 = parseInt(35.5);     //35
					如果parseInt方法的参数不是字符串,会自动先使用toString()转换成字符串之后再进行解析
		4. parseFloat()
			作用等同于parseInt().解析结果包含小数部分
			et :
				var r = parseFloat("35.5");    //35.5
			注意 : 如果字符串中出现指数计数法表示的小数
				"1.5e3",都视为是小数
7. 运算符
	1. 赋值运算符
		=
		将右边的值赋给左边变量
	2. 算数运算符
		1. + - * / %   ->   加 减 乘 除 取余
		2. ++ -- 自增或自减运算符
			变量的自增和自减指的是在自身基础上进行+1或-1的操作
			var n = 5;
			n ++;   // n = n + 1;
			console.log(n);  //6
			++ n;
			console.log(n);   //7
		注意 :
			1. 自增或自减运算符在单独与变量结合时,放前和放后没有区别
			2. 如果自增或自减运算符与其他运算符结合使用,要区分前缀和后缀,做前缀,那就先++/--,再进行赋值或其他运算,如果做后缀,就先结合其他运算符,再进行++/--
				et :
					var num = 5;
					var res = num ++;
					console.log(num,res);  //6 5
					------------------------------
					如果是 var res = num ++;
						1. 先找变量
						2. 从变量位置从右向左结合运算符
					------------------------------
					var num = 5;
					var res = ++ num;
					console.log(num,res);
				思考:
					var n = 5;
					var r = n++ + ++n + n++ + ++n + n;
					//      5       7   7       9   9  


	3. 关系运算符 (比较运算符)
		>		大于
		>=		大于等于
		<		小于
		<=		小于等于
		==		相等
		!=		不等
		===		恒等
		!==		不恒等
		注意 : 关系运算的结果为布尔类型
		1. 数字和数字比较
			var r = 10 > 5;	   // r = true
		2. 数字与字符串进行比较
			首先自动将字符串转换为数字再进行比较,如果转换成功,就按照数字之间的比较进行运算;如果转换失败,会变成数字与NaN之间的比较,结果永远都是False
		3. 字符串之间的比较,进行每位字符的Unicode码的比较,当前位如果相同,就后移至下一位再次进行比较,当前位如果不同,直接出结果
		4. == === / != !==
			相等 : == 用于判断两个值是否相等,在比较时,会自动转换数据类型,只要值相等,结果就为True
			恒等 : === 用于判断两个变量的数值类型和值是否完全相等,不会进行数据类型转换,
			只有当操作数的数据类型保持一致,值相等,才为True
			不等 : != 在两端值不相等的情况下,返回为True
			不恒等 : !== 两个操作数中,数据类型与值只要有一个不相等,就返回True,否则是False
	4. 逻辑运算符
		进行多项比较,并将结果组合为单一的布尔值
		&& : 逻辑与 等同于 python and, 左右为表达式,只有两个表达式的结果都为真,逻辑与的结果才为真
		|| : 逻辑或 等同于 python or , 只要有一个条件为真,结果就为真
		!  : 逻辑非 等同于 python not, 对现有条件的结果进行取反操作

		1. 条件1 && 条件2
				条件1		条件2		结果
		-----------------------------------------------
		取值	true 		true 		true
				true 		false 		false
				false 		true 		false
				false 		false 		false
		-----------------------------------------------
		2. 条件1 || 条件2
		-----------------------------------------------
		取值	true 		true 		true
				true 		false 		true
				false 		true 		true
				false 		false 		false
		-----------------------------------------------
		3. !条件
			直接取反
			非真即假,非假即真
	5. 位运算符
	程序中所有的数据在计算机中都是以二进制存储的,位运算,就是对二进制进行操作
	1. 按位与 : &
		将整数转换为二进制形式,每一位都进行与操作
		3   & 5  ->  1
		011 & 101
			et :
				0 1 1
			  & 1 0 1
			------------
			    0 0 1
	2. 按位或 : |
		3   | 5	  ->  7
		011 | 101
		---------------
			111
	3. 按位异或 : ^
		两个数字的二进制位进行比较,相同则为0,不同则为1
		3 ^ 5 -> 6
			011
		^	101
		----------
			110
		注意 : ^ 操作可以在不借助第三方变量的情况下,交换两个变量的值
		er :
			var a = 3,b = 5
			---------交换a b的值---------
			1. 普通做法
				var c = a;
				a = b;
				b = c;
			2 ^
				a = a ^ b;  ->  a = 6;
				b = a ^ b;  ->  6 ^ 5 ->110 ^ 101 -> 011
				a = a ^ b;  ->  6 ^ 3 ->110 ^ 011 -> 101
	6. 三目运算符
		三目运算符,有三个操作数
			类似:
				单目运算符(一元运算符) ++ -- ! typeof,只有一个操作数的运算符;
				双目运算符(二元运算符) + - * / % && || > ...有两个操作数的运算符
		语法 :
			条件表达式 ? 表达式1 : 表达式2;
			先判断条件表达式的结果,为真,执行表达式1;为假,执行表达式2
8. 流程控制语句
	控制当前代码的执行顺序
	流程语句结构 :
		1. 顺序结构
		2. 分支结构 (选择结构)
		3. 循环结构
	1. 顺序结构
		按照代码书写顺序,从上到下执行
	2. 分支(选择)结构
		1. 作用
			根据条件选择某一段代码执行
		2. if 结构
			1. if语句
				语法 :
					if (条件){
						待执行的语句
						只有条件为真,才执行{}里的语句
					}
				注意 :
					1. if()后面的{}可以省略,省略之后,只控制该结构下的第一条语句
					2. 条件尽可能是布尔类型的
					3. 任何非0值都为真,0为假,以下情况,条件的结果都为假
						if(0){}
						if(0.0){}
						if(""){}
						if(NaN){}
						if(undefined){}
						if(null){}
			2. if - else 结构
				语法 :
					if(条件){
						条件为真时要执行的语句
					} else {
						条件为假时要执行的操作
					}
			3. 多重分支结构
				fi(条件1){
					条件为真时要执行的语句
				} else if(条件2){
					条件1为假,条件2为真时要执行的语句
				} else if(条件3){
					条件1条件2为假,条件3为真时要执行的语句
				}
				...
				else{
					以上条件都为假,执行
				}
		3. switch 语句
			在进行值判断时用的比较多
			语法 :
				switch(变量){
					case 值1 :
						//如果变量的值与case给出的值相等,就会执行:后面的代码段
						break;//跳出switch语句,不再向后进行匹配,可以省略
					case 值2 :
						代码块;
						break;
					case 值3 :
						代码块;
						break;
					...
					default :
						代码块;		// 所有case都匹配失败之后执行的默认语句
				}
			注意 :
				1. 变量与case值的匹配,是用===恒等判断的,只有数据类型与值都相等才能匹配成功
				2. break 表示跳出switch判断,后面的判断语句不执行
				3. default关键字用于在表达式不匹配前面给出的任何一种情形时,最终执行的操作
	3. 循环结构
		1. 作用
			重复执行某段代码
		2. 循环三要素
			循环变量
			循环条件
			循环体
		3. while 循环
			1. 语法:
				while (循环条件){
					循环体
				}
			2. 循环语句的执行流程
				1. 定义循环变量
				2. 判断循环变量
				3. 条件成立,执行循环体
				4. 更新循环变量	(重点)
				5. 重复2 - 3 -
				4...指定循环条件不成立,结束循环
		4. do-while 循环
			1. 语法
				do{
					循环体
				}while(循环条件);
			2. 执行流程
				1. 定义循环变量
				2. 执行循环体
				3. 更新循环变量
				4. 判断循环条件,条件成立,重复2-3-4,条件不成立,结束循环
			3. while 与 do-while区别:
				while循环先判断循环条件,为真才执行循环体;
				di-while循环不管条件是否成立,先执行循环体,后判断循环条件。即使循环条件不成立,也会执行一遍循环体
		5. for 循环
			1. 语法
				for(1.定义循环变量; 2.判断循环条件; 3.更新循环变量){
					循环体
				}
			2. 循环流程
				1. 定义循环变量
				2. 判断循环条件
				3. 条件成立,执行循环体
				4. 更新循环变量
			3. for 循环与while循环的区别
				1. 相同点 : 执行流程相同
				2. 不同点 :
					while 循环常用于不确定循环次数的场合
					for 循环常用于确定循环次数的场合
			4. 循环控制
				1. break
					break用在循环体中,表示跳出循环,结束整个循环,并且循环体中break后面的代码都不执行
				2. continue
					continue用在循环体中,表示跳出本次循环,开始下一次循环
	4. 循环的嵌套
		允许在一个循环中嵌套另一个循环
		语法 :
			for(var i = 1; i <= 9; i ++){
				for(var j = 1; j <= 9; j ++){
				
				}
			}
9. 函数
	1. 函数,就是一段待执行的代码块
	2. 作用 :
		实现多条语句的封装
		实现代码复用
	3. 函数使用
		1. 函数的声明
		2. 函数的调用
		注意 : 函数先声明后调用(js中非强制)
	4. 语法 :
		1. 函数声明
			function 函数名 (参数列表) {
				函数体;
				返回值
			}
			1. JS中函数声明使用function关键字
			2. 函数名自定义,遵照变量命名规范,见名知意
			3. 参数列表,参数表示函数体执行所需要的数据,可以为空,为空时()不能省略:多个参数之间使用,隔开
			4. 返回值 使用return关键字,将函数体内部执行的结果传递给外界使用,只能返回一个值,返回值不需要的话,可以省略return
				注意 : return一定要写在函数体的末尾,return关键字后面的代码都不执行
			5. 匿名函数
				var fn = function (){
					函数体
				};
		2. 函数调用
			语法 : 函数名();
				   函数名(10,20);
				   var res = 函数名(10,20);
			注意 :
				1. 函数参数分为形参和实参,函数声明时,使用形参,函数调用时,传递实参
					形参 : 代号
					实参 : 具体的数据
				2. 函数如果有返回值,在调用时,需要定义变量接收返回值
	5. 变量的作用域
		1. 变量的作用域指的是变量起作用的范围
		2. 分类 ：
			1. 全局作用域
				处在全局作用域中的变量就是全局变量
					1. 在function之外通过var声明的变量都是全局变量，在任何地方都可以访问
					2. 声明变量时，省略var关键字，一律是全局变量，推荐使用var关键字，不要省略

			2. 局部作用域 （JS中局部作用域指的是函数作用域）
				局部作用域中的变量就叫局部变量
					1. 在函数内部使用var关键字声明的变量都是局部变量，只在当前函数作用域中可以访问，外界无法访问
					2. 局部变量出了函数就不能访问了
			注意 ：
				在函数中访问变量，
					1. 如果当前函数中没有该变量，就访问全局作用域中的变量
					2. 如果当前函数中定义了该变量，全局中也有相同的变量名，函数就近访问变量
10. 数组
	1. Array 数组是一个有序的元素序列，数组中的元素会自动分配下标，从0开始，方便读写
	2. 创建数组
		1. 创建空数组
			var 数组名 = [];
		2. 创建数组的同时初始化元素
			var 数组名 = [元素1,元素2,...];
		3. 创建空数组
			var 数组名 = new Array();
		4. 创建数组并初始化
			var 数组名 = new Array(元素1,元素2,...);
			注意 ：
				var 数组名 = new Array(Num);
				只包含一个数值参数时，表示初始化数组长度
				et :
					var arr = new Array(5);
	3. 数组的使用
		1. 获取数组的长度
			属性 ： length
			使用 ：数组名.length; //获取数组长度
		2. 访问数组元素
			数组中每一个元素都有对应的下标
			元素的下标范围 0 -> length-1
			语法 ：数组名[下标];
		3. 设置数组元素
			语法 ：数组名[下标] = value;
	4. 清空数组中元素
		arr.length = 0;
	5. 循环遍历数组
		//正序
		for(var i = 0; i < arr.length; i ++){
			arr[i];
		}
		//倒序
		for(var i = arr.lenth - 1; i >= 0; i --){
			arr[i];
		}
11. 数组的API
	1. toString()
		作用 ：将数组中的元素转换为字符串返回
		返回值 ：字符串
		et :
			var arr = [1,2,3];
			var s = arr.toString();
			console.log(s); //"1,2,3"
	2. join()
		作用 ：将数组中的元素连接成一个字符串并返回
		返回值 ：字符串
		参数 ：可选，如果省略参数，默认元素之间使用,连接。
			可以给参数，指定元素之间的连接符
	3. reverse()
		作用 ：反转数组元素
		返回值 ：数组，会改变数组的原有结构
		et :
			var arr = [10,20,30];
			//[30,20,10]
			console.log(arr.reverse());
	4. sort()
		作用 ：对数组中元素进行排序
		返回值 ：数组，会改变数组原有结构
		参数 ：可选，自定义排序函数，
		       默认按照元素的Unicode码升序排列
		1. 升序的排序函数
			function sortAsc(a,b){
				return a-b;
			}
			arr.sort(sortAsc);
			解释 ：
			1. sortAsc函数接收两个参数，
				会自动将数组中相邻的两个元素传递给参数
			2. 如果返回值>0，交换两个元素的位置，否则不变
		2. 匿名函数作为排序函数，直接写在（）中
				arr.sort(function (a,b){ return b-a;});
12. 数组的进出栈操作
		栈结构 ：遵循先进后出原则
		栈操作可以快速操作数组中的头尾元素
		1. push(data)
				入栈操作，向数组的尾部添加元素，可以是一个或多个
				返回值 ：返回新数组的长度
				 et :
						arr[arr.length] = 'hello';
						arr.push("Hi");
						arr.push(10,20); //多个数据之间只用,隔开
		2. pop()
				出栈操作，删除数组尾部元素
				返回值 ：返回被删除的元素
		3. unshift()
				向数组头部添加一个或多个元素
				返回最终数组的长度
		4. shift()
				删除数组中头部元素
				返回被删除的元素
13. 二维数组
		数组中每个元素又是一个数组
		语法 ：
			var arr = [[10,5,3],[20,23],[30,13]];
			console.log(arr.length); //3
			//向二维数组中添加元素
			arr[1][2] = 50;
			//访问二维数组中元素
			console.log(arr[2][0]); //30
			et :
				var books = [
					["西游记","三国演义","红楼梦","水浒传"];
					["西游记","三国演义","红楼梦","水浒传"];
				];

JS中的内置对象
	1. 对象 : 由属性和方法组成,使用点语法访问内部属性和方法
		arr.length;
		arr.sort();
	2. 对象分类 :
		1. 内置对象 - ES 提供的
		2. BOM 浏览器对象模型
		3. DOM 文档对象模型
		4. 自定义对象 - 函数
	3. 字符串 - String
		1. 声明字符串
			var str = "hello";
			var str2 = new String("字符串2");
			var str3 = String("字符串3");
			注意 : 只有内置对象再创建时可以省略new关键字
		2. 属性
			length : 表示字符串的长度
			var s = "你 好 坏";
			console.log(s.length);
		3. 常用方法
			1. 英文大小写转换
				1. toUpperCase()
					将英文字符串转换为全大写字母
				2. toLowerCase()
					将英文字符串转换为全小写字母
				注意 : 大小写转换操作会返回新的字符串,不影响原始字符串
			2. 获取指定位置的字符
				charAt(index);
			3. 检索字符串
				1. indexOf(value,fromIndex)
					value : 要查找的字符串
					fromIndex : 从指定的下标位置开始向后查找,可选参数,默认为0
					返回值 : 返回value 第一次出现的下标位置,如果查找失败,返回-1
				2. lastIndexOf(value,fromIndex)
					返回值 : 返回value最后一次出现的下标位置
			4. 分割字符串
				substring(startIndex,endIndex);
				返回指定下标范围内 startIndex - endIndex-1
				对应的字符串
			5. 分割字符串
				split(seperator);
				将字符串按照指定字符分割,拆分成若干个小字符串
				返回数组,数组中存放小字符串
			6. 模式匹配
				1. 作用
					配合正则表达式完成字符串的查找和替换
				2. 正则表达式
					语法:/正则格式/修饰符
					修饰符 :
						i : ignorecase 忽略大小写
						g : global 全局匹配
						m : multiple 多行匹配
				3. 字符串方法
					1. replace(subtr/regexp,replacement)
						作用: 在一个字符串中,将substr或者是满足正则格式的字符串
					2. match(substr/regexp)
					作用: 按照指定的子字符串 substr
其他内置对象
	1. 正则表达式对象
		1. 创建正则对象
			RegExp (Regular Expression)
			语法 :
				1. var reg1 = /匹配模式/ig
				2. var reg2 = new RegExp('匹配模式','修饰符');
		2. 正则对象的方法
			test(param)存在不准确性
				验证字符串中是否存在满足正则格式的内容,满足就返回true 不满足就返回false
				参数就是要验证的字符串
	2. Math 对象
		1. 作用 : 执行与数学相关的运算
		2. 属性 :
			Math.PI 表示数学常量 π
			Math.E  表示自然对数 e
		3. 方法 :
			1. 三角函数
				Math.sin(x)
				Math.cos(x)
				Math.tan(x)
				参数x为角度
			2. 计算函数
				Math.sqrt(x)  开平方
				Math.log(x)   求对数
				Math.pow(x,y) 求x的y次方
			3. 数值函数(较常用)
				Math.abs(x);  求x的绝对值
				Math.max(a,b,c,...);  求一组数据中的最大值
				Math.min(a,b,c,...);  求一组数据中的最小值
				Math.random() 获取随机数 [0,1)
				Math.round(x) 四舍五入取整数
				Math.ceil(x)  向上取整 舍弃小数位,整数位+1
				Math.floor(x) 向下取整 舍弃小数位,保留整数位
	3. Date 日期对象
		1. 作用 : 获取客户端的日期时间
		2. 创建Date对象
			1. 获取当前的日期时间
				var currentTime = new Date();
			2. 初始化自定义的时间
				var date = new Date('2018/09/13 17:10:55');
		3. 方法
			1. 读取或设置当前时间的毫秒数
				1. getTime()
					获取的毫秒数是从 1970-01-01 00:00:00 开始计算的
					返回当前日期对象与 1970-01-01 00:00:00 之间的毫秒数
				2. 设置 setTime(毫秒数)
					根据指定的毫秒数,结合1970-01-01 00:00:00计算日期
			2. 读取时间分量
				1. getFullYear()
					获取当前日期对象的年份 四位年份数字
					/*
					getYear() 已弃用
					返回当前对象距1900年之间的年数
					*/
				2. getMonth()
					获取当前日期对象的月份信息
					返回 0 - 11 表示 1 - 12 月
				3. getDate()
					返回具体的天 日期
				4. getDay()
					返回当前日期对象对应的星期数
					返回 0 - 6 表示 星期日 - 星期六
				5. 返回时间
					getHours()    返回小时数
					getMinutes()  返回分钟数
					getSeconds()  返回秒数
					getMilliseconds()  返回毫秒数
				6. 日期显示方式 (转换字符串)
					1. toString();
					2. toLocaleString(); 根据本地时间将date对象转换为字符串,返回以本地规则格式化之后的日期(本地时间区表示)
					3. toLocaleTimeString() 上下午 时分秒
					4. toLocaleDateString() 年月日
--------------------------------------------------------------------------
外置对象
	1. BOM 和 DOM
		BOM : Bowser Object Model 浏览器对象模型
		主要提供了操作浏览器的一系列属性与方法
		BOM的核心对象 window 对象, JS的顶层对象
		window对象在网页初始化的过程中自动创建
		每打开一个窗口,都对应一个window对象
		DOM : Document Object Model 文档对象模型
		主要提供了操作HTML文档的属性和方法
		核心对象 document对象,其本身也是window对象的属性
		使用时,可以省略window
	2. window对象
		1. 作用 : 浏览器窗口对象
			全局变量和全局函数,都是window对象的属性和方法
			window在使用时可以省略
		2. 对话框
			1. alert("");
				警告框 window.alert();
			2. prompt("");
				输入框 window.prompt();
			3. confirm("是否确定");
				确认框 返回布尔值,只有当用户点击"确定"时,才返回true,其他都返回false
	3. 定时器方法
		作用 : 按照指定的周期或者时间间隔,来调用函数或者计算表达式
		1. 周期性定时器 / 间歇调用
			1. 特点 : 每隔一段时间就执行一遍代码
			2. 语法 :
				var timer = setInterval(fun,duration);
				window.setInterval();
				参数 :
					fun : 表示要执行的操作,可以是函数,也可以直接使用匿名函数
					duration : 时间间隔,隔多少时间执行一次代码   单位是 ms (毫秒)
				返回值 :
					timer : 表示当前定时器的ID，就是一个整数，可以区分不同的定时器，清除定时器时使用
			3. 清除定时器
				clearInterval(timer);
				参数 : 定时器的ID
		2. 一次性定时器 / 超时调用
			1. 特点 : 在指定的时间间隔之后,执行一次操作
			2. 语法 :
				var timer = setTimeout(fun,delay);
				参数 :
					fun : 要执行的操作
					dalay : 时间间隔,隔多久再执行相应操作
				返回值 :
					timer : 定时器ID,在清除定时器时使用
			3. 清除定时器 :
				clearTimeout(timer);
	4. window中的属性
		window中的属性,本身又是一个对象
		1. screen对象
			访问屏幕对象 : console.log(screen);
						   console.log(window.screen);
			作用 : 获取客户端显示器相关的信息
			属性 :
				1. width / height 获取屏幕的宽高
				2. availWidth / availHeight 获取屏幕实际可用的宽高 (减去任务栏之后的值)
		2. history 对象
			作用 : 包含当前窗口访问过的所有URL
			属性&方法 :
				1. length 属性 : 获取当前窗口访问过的url的数量
				2. 方法 :
					1. back() 后退
					2. forward() 前进
					3. go(num) 跳转几步
						num 取值为整数,可正可负
						在当前网页的基础上前进/后退几步
		3. location 对象
			作用 : location 保存的是浏览器地址栏的信息
			属性 :
				href : 获取当前窗口正在浏览的网页url
				如果给href属性赋值,就相当于页面跳转
			方法 :
				reload() 重载,相当于刷新
				reload(true) : 忽略缓存,从服务器端加载
				reload(false) : 从缓存中加载 (默认)
		4. navigator 对象
				作用 ：保存浏览器相关的信息
				属性 ：
						userAgent ：显示信息
DOM (ducument对象)
		1. 介绍 ：
			document对象，是DOM中的顶层对象，封装了所有的HTML元素
			相关的属性，方法以及事件
		2. 节点（对象）
			网页在加载过程中，会自动生成一颗节点树（DOM树），
			DOM树会封装网页上所有的内容。网页中的每一个元素，
			每一段文本，甚至注释，都会被封装成DOM树中单独的
			一个节点
			1. 节点分类 
				1. 元素节点 - 网页中的一个元素（标签）
				2. 属性节点 - 标签中的一个标签属性
				3. 文本节点 - 表示标签中的文本内容
				-------------------------------
				4. 注释节点 - 网页中的注释
				5. 文档节点 - 表示整个文档
			2. 节点操作
				1. 获取节点
				2. 读取节点
				3. 修改节点
				4. 删除节点
				5. 创建节点
		3. 获取元素节点
				1. document.getElementsByTagName('a');
						通过制定的标签名获取元素节点，返回
						节点列表（数组），可以根据下标获取具体的
						元素节点对象
				2. document.getElementsByClassName('');
						根据元素class属性值查找，返回节点列表
				3. document.getElementsByName('');
						根据元素name属性值查找，返回节点列表
						一般用于查找表单元素
				4. document.getElementById('');
						根据元素id属性值查找，返回具体的元素节点对象
				注意 ：
					脚本标签的书写位置，要放在body之后
				DOM 属性：
					1. innerHTML : 
							修改/获取元素节点中的HTML文本，可识别标签
					2. innerText :
							修改/获取元素节点中的普通文本，不能识别标签
					3. value :
							该属性只针对表单控件，允许获取或修改表单
							控件的值
		4. 获取或设置属性节点的值
			操作标签属性
			1. getAttribute(attrName)
				作用 : 获取指定属性的值
				attrName : 属性名
			2. setAttribute(attrName,value)
				作用 : 设置属性和对应的值
				attrName : 属性名
				value : 属性值
			3. removeAttribute(attrName)
				作用 : 移除指定属性
			4. 可以使用点语法访问元素节点的属性
				元素节点.属性名
		5. 操作元素样式
			1. setAttribute()
				可以设置元素 class / id 的属性值,对应选择器
			2. 针对类选择器的样式,可以为元素属性className赋值
				元素.className = "";
			3. 使用内联方式添加样式
				<h1 style="color:red;"></h1>
				元素.style.css属性名 = "";
				注意 :
					如果CSS属性名中有连接符 - ,在JS中访问时一律改成驼峰标识:
						font-size 在JS中使用 fontSize
						background-color  backgroundColor
		6. 读取节点信息
			1. 节点类型
				属性 : nodeType
				值 :
					1  表示元素节点
					2  表示属性节点
					3  表示文本节点
					8  表示注释节点
					9  表示文档节点
			2. 获取节点名称
				属性 : nodeName
				取值情况 :
					元素节点&属性节点  返回元素名 或者 属性名
					文本节点		   返回 #text
					注释节点		   返回 #comment
					文档节点		   返回 #document
		7. 节点对象的层次属性
			1. parentNode
				表示获取当前节点的父节点
			2. childNodes
				表示获取当前节点所有的子节点,返回子节点数组
				注意 : 文本节点和属性节点都会作为当前元素节点的子节点,换行和空格都会作为空的文本节点计算在内
			3. children
				返回当前节点的所有子节点数组
				注意 : 只返回子元素节点,不包含文本节点和属性节点
			4. nextSibling
				表示下一个元素兄弟节点
				注意 : nextElementSibling
						表示下一个元素兄弟节点
			5. previousSibling
				表示上一个兄弟节点
				注意 : previousElementSibling
						表示上一个元素兄弟节点
			6. attributes
				获取当前元素节点对象的所有属性节点集合
				<input type="" value="" maxlength="">
---------------------------------------------------------------
DOM节点操作
	1. 增加节点
		1. 创建元素节点和文本节点
			语法 :
				元素节点 : var div = document.createElement('div');
				文本节点 : var text = document.createTextNode('内容');
			注意 :
				属性节点可以通过元素节点点语法直接访问和设置
		2. 添加节点
			DOM中对节点的插入 删除 追加操作,都由父元素执行
			1. 在父元素中动态追加子节点
				语法 :
					父节点.appendChild(子节点);
				注意 : 文本节点也是元素的子节点
			2. 在文档的指定位置插入节点
				语法 :
					parentNode.insertBefore(newElem,oldElem);
					将newElem节点插入到oldElem节点之前
		3. 删除节点
			1. 如果是删除body的子元素
				document.body.removeChild(elem);
			2. 如果元素层级结构较多,就需要通过父节点parentNode执行删除操作
				parentNode.removeChild(elem);
	2. 事件
		1. 事件 : 由用户行为激发的操作
		2. 事件处理函数(都以on为前缀)
			1. 鼠标事件
				onclick   鼠标单击事件
				ondbclick 鼠标双击事件
				onmouseover  鼠标移入元素时触发
				onmouseout   鼠标移出元素时触发
				onmousemove  鼠标在元素内移动时触发
			2. onload 事件
				文档或元素加载完毕之后触发
			3. 状态改变事件
				常用于表单控件
				onfocus  元素获取焦点时触发
				onblur   元素失去焦点时触发
				onchange 元素内容发生改变时触发,在元素失去焦点之后才触发
				oninput  元素的value值发生变化时触发,实时监听输入
				onsubmit 当表单被提交时触发
			4. 键盘事件
				onkeydown 键位被按下时触发
				onkeypress 键位被按下时触发
				onkeyup  键位抬起时触发
		3. 事件的绑定方式
			1. 内联方式 : 在标签中绑定事件函数
				<button onclick="执行函数()"></button>
			2.在JS中动态绑定事件处理函数
				语法 :
					元素节点.事件函数名 = function(){};
			3. W3C标准事件监听函数
				elem.addEventListener('click',fun);
				elem.removeEventListener();
			4. this关键字
				this表示触发当前事件的元素点对象,用在事件函数内部
				div.onclick = function(){
					console.log(this);
				};
	3. 事件行为
		1. onload事件
			 常用于为body绑定load事件，表示等待body内容加载完毕再
			 执行事件函数
			 et :
					<body onload = "fun();"></body>
					//JS动态绑定
					window.onload = function () {
						//等待文档加载完毕之后再执行
					};
		2. onsubmit事件
				只有在表单提交时才触发
					注意 ：该事件需要一个Boolean返回值来通知表单是否
								要提交，返回true表示表单可以提交，
								返回false表示阻止表单提交
				常用于验证表单是否可以提交
	4. 事件对象
		1. 事件对象 event 
				伴随事件触发产生，包含了当前事件所有的信息
		2. 获取事件对象
				由于事件对象伴随事件触发自动产生，浏览器会
				自动将其作为参数传递给事件处理函数，所以我们
				需要在事件处理函数出接收参数，就可以获取事件对象
				et:
						function sum (a,b){
							return a + b;
						}
						sum(10,20);

						div.onclick = function (evt) {
								console.log(evt);
						};
		3. 事件对象的常用操作
				不同的事件对应不同的事件对象，其所包含的信息也不同
				1. 获取事件源
						触发事件的节点对象
						evt.target;
				2. 鼠标事件对象包含的属性
						1. offsetX,offsetY
								获取鼠标在元素上的坐标点（以元素左上角为原点）
						2. clientX,clientY
								获取鼠标在网页中的坐标点
						3. screenX,screenY
								获取鼠标在屏幕中的坐标点
				3. 键盘事件对象包含的信息
						键盘事件 ：onkeypress onkeydown onkeyup
						1. keypress 事件
								只有在输入字符（键盘输入）时才触发
								事件对象的属性 ：
								1. which 属性
										获取当前按下字符的ASC码
								2. key
										获取当前键位表示的字符
						2. keydown
								1. which
										获取当前键位的键码
										值区分按键，不区分大小写
						注意 ：键盘事件的监听顺序 keydown keypress keyup
----------------------------------------------------------------------------------
一	事件传递机制
	1. 事件传递 :
		当页面一个元素触发事件时,其他相关的元素都会接收这个事件,都可以选择对事件作出的响应
	2. 事件传递机制 :
		事件传递机制描述的是页面中元素处理事件的顺序,有两种机制 : 冒泡 和 捕获
		1. 冒泡传递 :
			从里向外逐个触发 (默认传递方式)
		2. 捕获传递 :
			从外向里逐个触发 (IE不支持)
		阻止事件传递 :
			该事件只在当前元素中执行,不向上传递
			evt.stopPropagation(); (默认冒泡情况下)

二 jQuery
	1. 介绍
		jQuery是一个JavaScript的库,通过封装原生的JavaScript,得到一整套定义好的方法,简化JS操作
		Write Less , Do More
		jQuery版本 :
			jQuery 1.xx.x 版本,兼容IE 6,7,8
			jQuery 2.xx.x 版本,不再兼容IE 6,7,8
	2. jQuery的功能和优势
		1. 简化DOM操作,像操作CSS一样去操作DON
		2. 直接通过选择器设置元素样式
		3. 简化JS的代码操作 (链式调用)
		4. 事件的处理更加容易
		--------------------------------
		5. 各种动画效果使用更加方便
		6. 让Ajax技术更完美
		7. 基于jQuery有大量方便的插件
		8. 自行扩展功能插件
	3. jQuery使用
		1. 引入jQuery文件
			1. 本地文件引入
				<script src=""></script>
			2. 网络文件引入
				<script src="url"></script>
			注意 : 如果想使用jQuery语法操作JS,必须将jQuery引入放在JS代码之前
		2. jQuery使用
			1. jQuery 对象 - jQuery/$
				jQuery对象是对DOM对象封装之后产生的对象
				jQuery对象只能操作jQuery提供的方法,DOM对象也只能操作原生JS提供的方法,不能混用
			2. 工厂函数 - $()
				如果想要获取元素对象,必须通过工厂函数
				函数中可以传递参数 : 选择器/DOM对象
			3. jQuery对象与DOM对象互相转换
				1. DOM 转换为 jQuery 对象
					var h1 = document.getElementsByTagName('h1')[0];
					var $h1 = $(h1);
				2. jQuery 转换为 DOM
					var h1 = $h1[0];
					var h1 = $h1.get(0);
jQuery选择器
	1. 作用
		根据选择器获取页面中的元素,返回值都是由jQuery对象组成的数组
	2. 语法 :
		$('选择器')
	3. 常用的选择器
		1. 基础选择器
			1. ID选择器
				$('#id');
				返回id属性值为指定的id的元素对象
			2. 类选择器
				$(".className");
				返回指定类名对应的元素
			3. 标签选择器
				$('element');
				返回指定标签名对应的元素
			4. 群组选择器
				$('selector1,selector2,...');
		2. 层级选择器
			1. 后代选择器
				$('selector1 selector2')
			2. 子代选择器
				$('selector1>selector2')
			3. 相邻兄弟选择器
				$('selector1+selector2')
				匹配紧跟在selector1后满足selector2的元素
			4. 通用兄弟选择器
				$('selector1~selector2')
				匹配selector1后所有满足selector2的元素
		3. 基本过滤选择器
			过滤选择器需要结合其他的选择器一起使用
			1. :first
				只匹配一组元素中的第一个元素
				$('p:first')
			2. :last
				匹配一组元素中的最后一个元素
				$('p:last')
			3. :not
				否定筛选,将满足selector选择器的元素都排除在外,匹配剩余元素
				$(':not(p,h1)')
			4. :odd
				匹配偶数行对应的元素 (奇数下标)
			5. :even
				匹配奇数行对应的元素
			6. :eq(index)
				匹配下标等于index的元素
			7. :gt(index)
				匹配下标大于index的元素
			8. :lt(index)
				匹配下标小于index的元素
		4. 属性选择器 []
			根据标签属性匹配元素
			1. [attribute]
				匹配包含指定属性的元素
			2. [attribute=value]
				匹配属性attribute=value的元素
			3. [attribute!=value]
				匹配attribute属性值不等于value的元素
			4. [attribute^=value]
				匹配属性值以value字符开头的元素
			5. [attribute$=value]
				匹配属性值以value字符结尾的元素
			6. [attribute*=value]
				匹配属性值中包含value字符的元素
		5. 子元素过滤选择器
			1. :first-child
				匹配属于其父元素中的首个子元素
			2. :last-child
				匹配属于其父元素中的最后一个子元素
			3. :nth-child(n)
				匹配属于其父元素中的第n个子元素
			注意 :
				将要匹配的子元素与筛选选择器相结合使用
jQuery操作DOM
	1. 基本操作
		1. html()
			获取或者设置jQuery对象中的html内容
			类似于DOM innerHTML,可识别标签
		2. text()
			获取或者设置jQuery对象中的text内容
			类似于innerText
		3. val()
			获取或者设置jQuery对象value值 (常见于表单控件)
		4. 属性操作
			1. attr()
				读取或设置jQuery对象属性值
				参数为字符串形式的属性名
			2. removeAttr()
				移除指定的属性,参数为属性名
	2. 样式操作
		1. attr();
				添加id或class属性，对应选择器，为元素添加样式
		2. addClass('className')
				将className作为值添加到元素的class属性上
			  是可以连缀调用的
				$('h1').addClass('c1').addClass('c2')...
		3. removeClass('className');
				移除className
				参数可以省略，表示清空类选择器
		4. toggleClass('className')
				切换样式 :
					元素如果具备className对应的样式，则删除
					如果没有，就添加
		5. css('')
			获取元素样式属性的值
		6. css('','')
			设置元素的样式
	JSON对象的表示方式
		1. JSON对象必须使用{}括起来
		2.使用键值对来声明数据(属性与值)
		3.

jQuery创建对象
	1. $('标签')
		参数为要创建的标签,使用HTML标签语法
jQuery 插入元素
	1. 内部插入
		将创建好的元素作为子元素插入到网页中
		$obj.append($new)
			将新创建的元素作为最后一个子元素添加
		$obj.prepend($new)
			将创建好的元素作为第一个子元素添加
	2. 作为兄弟元素插入
		$obj.after($new)
			将新元素作为$obj的下一个兄弟元素添加进来
		$obj.before($new)
			将新元素作为$obj的上一个兄弟元素添加进来
jQuery 删除元素
	语法 : $obj.remove()
	作用 : 将$obj移除掉
jQuery 事件处理
	1. 页面加载完成之后再执行
		语法 :
			1.	$(document).ready(function (){
					//加载完成之后执行的操作
				});
			2.	$().ready(function (){
			   		//加载完成之后执行的操作
			   	});
			3.	$(function (){
					//加载完成之后执行的操作
				});
		与原生onload事件的区别 :
			1. 原生onload事件不能多次使用,后面的会把前面的覆盖掉,只执行最后书写的onload
				jQuery中的ready方法,也表示文档加载完毕,可以使用多次,所有的相关函数都会被执行,不会被覆盖
			2. 原生onload事件,等待页面中DOM节点及所有页面资源全部加载完成才执行
				jQuery中的ready方法,只等待DOM树加载完成就执行相关函数
	2. jquery事件绑定
		1. 方式1
			$obj.bind('事件名称',function (){
				//事件处理函数
			});
			注意 :
				事件名称省略on前缀
		2. 方式2
			$obj.事件名称(function (){
				//事件处理
			});
			注意 :
				事件名称省略on前缀
	3. jquery 事件对象
		在绑定事件时,允许传递参数表示事件对象
		$obj.bind('click',function (event){
			console.log(event);
		});
		事件对象的使用方法