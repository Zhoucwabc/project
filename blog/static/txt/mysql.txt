

1.MySQL概述
	1.什么是数据库
		存储数据的仓库
	2.都有哪些公司在用数据库
		金融机构,游戏网站,购物网站,论坛网站 ...  ...
	3.提供数据库服务的软件
		1.软件分类
		    MySQL  Oracle  SQL_Server  DB2  MongoDB  MariaDB
		2.生成环境中,如何选择使用哪个数据库软件
			1.是否开源
			  1.开源软件:MySQL  MariaDB  MongoDB
			  2.商业软件:Oracle  DB2  SQL_Server
			2.是否跨平台
			  1.不跨平台:SQL_Server
			  2.跨平台:  ...
			3.公司的类型
			  1.商业软件:政府部门  金融机构
			  2.开源软件:游戏网站  购物网站  论坛网站  ...
		3.MySQL的特点
			1.关系型数据库
				1.关系型数据库特点
					1.数据是以行和列(表格)的形式去存储的
					2.表中的每一行叫一条记录,每一列叫一个字段
					3.表和表之间的逻辑关联叫关系
				2.实例
					1.关系型数据库存储
						表1 学生信息表
						  姓名  年龄   班级
						  星矢   25    三班
						  水冰月 25    六班
						表2  班级信息表
						  班级   班主任
						  三班   大空翼
						  六班   松人
					2.非关系型数据库中存储
						{"姓名":"水冰月","年龄":25,"班级":"六班","班主任":"松人"}
						{"姓名":"星矢","年龄":25,"班级":"六班","班主任":"大空翼"}
			2.跨平台
				可以在不同的系统上运行数据库服务
			3.支持多种编程语言
				python  java  php  ...  ...
		4.数据库软件  数据库  数据仓库的概念
			1.数据库软件
			  一个软件,看得见,可操作,实现数据库的逻辑功能
			2.数据库
			  是一种逻辑概念,用来存放数据的仓库,侧重存储
			3.数据仓库
			  从数据量上来说,比数据库庞大的多,主要用于数据分析和数据挖掘

			  网购:
			    数据库: user表
			    数据仓库: 哪个时间段用户登录量最多,哪个用户一年购物最多
2.MySQL安装
	1.Ubuntu安装MySQL服务
		1.安装服务端
			sudo apt-get install mysql-server
		2.安装客户端
			sudo apt-get install mysql-client
		3.Ubuntu安装软件
			1.sudo apt-get update
			  访问源列表中的每个网址,读取软件列表,保存到本地/var/lib/apt/lists/
			2.sudo apt-get upgrade
			  把本地已安装软件与刚下载的软件列表进行对比,如果发现已安装软件版本低,则更新
			3.sudo apt-get -f install
			  修复依赖关系
	2.Windows安装MySQL
		1.下载MySQL安装包(windows)
			mysql-installer.....  5.7  .....  .msi
		2.安装教程去安装
		
			教学:5.7
			最新:8.0

3.启动和连接MySQL服务
	1.服务端启动
		1.查看MySQl状态
		  sudo /etc/init.d/mysql status
		  sudo /etc/init.d/mysql start | stop | restart
		  
	2.客户端连接
		1.命令格式
		  mysql -h主机地址 -u用户名 -p密码
		  mysql -hlocalhost -uroot -p123456

		2.本地连接可省略 -h 选项
		  mysql -uroot -p123456

4.基本SQL命名
	1.SQL命令的使用规则
		1.每条命令必须以 ; 结尾
		2.SQL命令不区分字母大小写
		3.使用 \c 来终止当前命令的执行
	2.库的管理
		1.库的基本操作
			1.查看已有库
				show databases;
			2.创建库(指定字符集)
				create database 库名 [character set utf8];
			3.查看创建库的语句(字符集)
				show create database 库名;
			4.查看当前所在库
				select database();
			5.切换库
				use 库名;
			6.查看库中已有表
				show tables;
			7.删除库
				drop database 库名;
		2.库名的命名规则
			1.数字,字母,下划线,但不能使用纯数字
			2.库名区分字母大小写
			3.不能使用特殊字符和msql关键字
		3.练习
			1.创建库testdb,指定字符集为 utf8
			2.进入到库 testdb
			3.查看当前所在库
			4.创建库testdb2,指定字符集为latin1
			5.进入到库testdb2
			6.查看testdb2的字符集
			7删除
	3.表的管理
		1.表的基本操作
			1.创建表(指定字符集)
				create table 表名(
				字段名 数据类型,
				字段名 数据类型,
				...
				字段名 数据类型
				);
			2.查看已有表的字符集
				show create table 表名;
			3.查看表结构
				desc 表名;
			4.删除表
				drop table 表名;

	4.注意
		1.所有的数据都是以文件的形式存放在数据库目录下
		2.数据库目录: /var/lib/mysql
		
	5.Mac安装musql
		1.cd
		2.vi.bash_profile
			添加:PATH="$PATH":/usr/local/mysql/bin
		3.source.bash_profile
	6.表记录管理
		1.插入(insert)
			1.insert into 表名 values(值1),(值2),...;
			2.insert into 表名(字段1,...) values(值1),...;
		2.查询
			1.select * from 表名 [where 条件];
			2.select 字段名1,字段名2,... from 表名 [where 条件];

5.如何更改默认字符集
	1.方法(通过更改MySQL配置文件实现)
	2.步骤
		1.获取root权限
			sudo -i
		2.cd /etc/mysql/mysql.conf.d/
		3.备份:	cp mysqld.cnf mysql.cnf.bak
		4.subl mysqld.cnf
			[mysqld]
			character_set_server = utf8
		5.重启mysql服务
			/etc/init.d/mysql restart
6.客户端把数据存储到数据库服务器上的过程
	1.连接到数据服务器 mysql -uroot -p123456
	2.选择一个库 use 库名
	3.创建表/修改表 update 表名...
	4.断开与数据库连接 exit; | quit; | \q;
7.数据类型
	1.数值类型
		1.整型
			1.int 大整型(4个字节)
				取值范围: 2**32-1(42亿多)
			2.tinyint 微小整型(1个字节)
				1.有符号(signed默认) :  -128 ~ 127
				2.无符号(unsigned) :  0 ~ 255
					age tinyint unsigned,
				3.samllint 小整型(2个字节)
				4.bigint 极大整型(8个字节)
		2.浮点型
			1.float(4个字节,最多显示7个有效位)
				1.用法
				  字段名 float(m,n)  m->总位数  n->小数位位数
				  float(5,2)取值范围 -999.99 ~ 999.99
			2.decimal(最多显示28个有效位)
				1.decimal(m,n)
				2.存储空间(整数,小数分开存储)
					规则: 将9的倍数包装成4个字节
					余数	字节
					  0	  0
					 1-2	  1
					 3-4	  2
					 5-6	  3
					 7-9	  4
	2.字符类型
		1.char(定长)
			1.取值范围:1 ~ 255
		2.varchar(变长)
			1.取值范围:1 ~ 65535
		3.text / longtext(4G) / blob / longblob(4G)
		4.char和varchar的特点
			1.char:浪费存储空间,性能高
			2.varchar:节省存储空间,性能低
		
	3.枚举类型
	4.日期时间类型


1.表字段的操作
	1.语法 : alter table 表名 执行动作;
	2.添加字段(add)
		alter table 表名 add 字段名 数据类型;
		alter table 表名 add 字段名 数据类型 first;
		alter table 表名 add 字段名 数据类型 after 字段名;
	3.删除字段(drop)
		alter table 表名 drop 字段名;
	4.表字段重命名(change)
		alter table 表名 change 原名 新名 数据类型
	5.修改数据类型(modify)
		alter table 表名 modify 字段名 新数据类型;
	6.表重命名(rename)
		alter table 表名 rename 新表名;
	7.表记录管理
		1.删除表记录
			1.delete from 表名 where 条件;
			2.注意
				delete语句后如果不加where条件,所有记录全部清空
		2.更新表记录
			1.update 表名 set 字段1=值1,字段2=值2,... where 条件;
			2.注意
				必须加where条件
2.运算符操作
	1.数值比较/字符比较
		1.数值比较:=  !=  >  >=  <  <=
		2.字符比较:=  !=
	2.逻辑比较
		1.and(两个或多个条件同时成立)
		2.or(任意一个条件成立即可)
	3.范围内比较
		1.between 值1 and 值2			100~200
		2.where 字段名 in(值1,值2,...)
		3.where 字段名 not in(值1,值2,...)
	4.匹配空,非空
		1.空:where name is null
		2.非空:where name is not null
		注意
			NULL:空值,只能用 is 或者 is not 去匹配
			""  :空字符串,用 = 或者 != 去匹配
	5.模糊比较
		1.where 字段名 like 表达式
		2.表达式
			1. _:匹配单个字符
			2. %:匹配0到多个字符
			## NULL 不会被统计,只能用 is , is not 去匹配
3.SQL查询
	1.总结
		3 select ...聚合函数 from 表名
		1 where ...
		2 group by ...
		4 having ...
		5 order by ...
		6 limit ...;
	2.order by
		1.  给查询结果进行排序
		2.  ... order by 字段名 ASC/DESC
		3.  升序:ASC(默认)
		    降序:DESC
	3.limit (永远放在SQL语句的最后写)
		1. 作用 : 限制显示查询记录的个数
		2. 用法 
			1. limit n        ->显示 n 条记录
			2. limit m,n
				m 表示 从第m+1条记录开始显示,显示 n 条
				limit 2,3     : 第 3、4、5三条记录
		3.分页
			每页显示5条记录,显示第4页的内容
			第1页:limit 0,5		#1 2 3 4 5
			第2页:limit 5,5		#6 7 8 9 10
			第3页:limit 10,5	#11 12 13 14 15
			第4页:limit 15,5	#16 17 18 19 20
			...
			第n页:limit (n-1)*5,5
			
			每页显示n条记录,显示第m页: limit (m-1)*n,n
	4.聚合函数
		1.分类
			avg(字段名) : 求该字段平均值
			sum(字段名) : 求和
			max(字段名) : 最大值
			min(字段名) : 最小值
			count(字段名) : 统计该字段记录的个数		# 空值 NULL 不会被统计  ""会被统计
	



1.SQL查询
	1.执行顺序
		3 select ...聚合函数 from 表名
		1 where ...
		2 group by ...
		4 having ...
		5 order by ...
		6 limit ...;
	2.group by
		1.作用:给查询的结果进行分组
			注意:	group by之后的字段名必须要为select之后的字段
				如果select之后的字段名和group by之后的字段不一致,则必须对该字段进行聚合处理(聚合函数)
	3.having语句
		1.作用:对查询的结果进行进一步筛选
			注意:	1.having语句通常和group by语句联合使用,过滤由group by 语句返回的记录集
				2.where只能操作表中实际存在字段,having可操作由聚合函数生成的显示列
	4.distinct
		1.作用:不显示字段重复值
		注意:	1.distinct和from之间所有字段都相同才会去重
			2.distinct不能对任何字段做聚合处理
	5.查询表记录时做数学运算
		1.运算符
			+  -  *  /  %
		2.约束
			1.作用:保证数据的完整性,一致性,有效性
			2.约束分类
				1.默认约束(default)
					1.插入记录,不给该字段赋值,则使用默认值
				2.非空约束(not NULL)
					1.不允许该字段的值有NULL记录
				sex enum("M","F","S") not null default "S"
		3.索引
			1.定义
				对数据库表的一列或多列的值进行排序的一种结构
				（Btree方式）
			2.优点
				加快数据检索速度
			3.缺点
				1.占用物理存储空间
				2.当对表中数据更新时,索引需要动态维护,降低数据维护速度
			开启运行时间检测: set profiling=1;
			查看执行时间:	show profiles;

			4.索引
				1.普通索引(index)
					1.使用规则
						1.可设置多个字段
						2.字段值无约束
						3.key标志:MUL
					2.创建index
						1.创建表时
							creat table 表名(...
							index(字段名),index(字段名));
						2.已有表
							create index 索引名 on 表名(字段名);
							create index name on t3(name);
						3.查看索引
							1.desc 表名;	-->KEY标志位:MUL
							2.show index from 表名\G;
						4.删除索引
							drop index 索引名 on 表名;
				2.唯一索引(unique)
					1.使用规则
						1.可设置多个字段
						2.约束:字段值不允许重复,但可为NULL
						3.KEY标志:UNI
					2.创建
						1.创建表时创建
							unique(字段名),
							unique(字段名)
						2.已有表中
							create unique index 索引名 on 表名(字段名);
						3.查看,删除 同 普通索引
				3.主键索引(primary key)
					自增长属性(auto_increment,配合主键一起使用)
					1.使用规则
						1.只能有一个主键字段
						2.约束:不允许重复,且不能为NULL
						3.KEY标志:PRI
						4.通常设置记录编号字段id,能唯一锁定一条记录
					2.创建
						1.创建表时
							(id int primary key auto_increment,
							)auto_increment=10000;	##设置自增长起始值已有表重新指定起始值:
											alter table 表名 auto_increment=20000;
						2.已有表
							alter table 表名 add primary key(id);
						3.删除
							1.先删除自增长属性(modify)
								alter table 表名 modify id int;
							2.删除主键索引
								alter table 表名 drop primary key;

		4.数据导入
			1.作用:把文件系统的内容导入到数据库中
			2.语法
				load data infile "文件名"
				into table 表名
				fields terminated by "分隔符"
				lines terminated by "\n";
			3.将文件导入到数据库的表中
				1.在数据库中创建对应的表
					create table scoretab(
					id int,
					name varchar(15),
					score float(5,2),
					number bigint,
					class char(7)
					);

				2.把文件拷贝到数据库的默认搜索路径中
					1.查看默认搜索路径
						show variables like "secure_file_priv";
						/var/lib/mysql-files/
					2.拷贝文件
						sudo cp ~/scoretable.csv /var/lib/mysql-files/
				3.执行数据导入语句
		5.数据导出
			1.作用
				将数据库中表的记录导出到系统文件里
			2.语法格式
				select ... from 表名
				into outfile "/var/lib/mysql-files/文件名"
				fields terminated by "分隔符"
				lines terminated by "\n";


1.外键(foreign key)
	1.定义:让当前表字段的值在另一个表的范围内选择
	2.语法
		foreign key(参考字段名)
		references 主表(被参考字段名)
		on delete 级联动作
		on update 级联动作
	3.使用规则
		1.主表、从表字段数据类型要一致
		2.主表被参考字段:主键
	4.删除外键
		alter table 表名 drop foreign key 外键名;
		外键名:show create table 表名;
	5.级联动作
		1.cascade 级联更新
			数据级联删除、更新(参考字段)
		2.restrict(默认)
			从表有相关联记录,不允许主表操作
		3.set null
			主表删除、更新,从表相关联记录字段值为NULL
	6.已有表添加外键
		alter table 表名 add
		foreign key(参考字段) references 主表(被参考字段)
		on delete ...
		on update ...
2.表的复制
	1.语法
		create table 表名 select ... from 表名 where 条件;
	2.复制表结构
		create table 表名 select ... from 表名 where false;
	注意:
		复制表时不会把原有表的键(key)属性复制过来

3.嵌套查询(子查询)
	1.定义:把内层的查询结果作为外层的查询条件
	2.语法格式
		select ... from 表名 where 条件(select ...);
4.多表查询
	1.两种方式
		select 字段名列表 from 表名列表;(笛卡尔积)
	2. ... where 条件
5.连接查询
	1.内连接
		1.语法格式
		  select 字段名 from 
		  表1 inner join 表2 on 条件
		  inner join 表3 on 条件;
		2.显示省市详细信息
		  select sheng.s_name,city.c_name from sheng
		  inner join city on sheng.s_id=city.cfather_id;
		3.显示省市县详细信息
		  select sheng.s_name,city.c_name,xian.x_name from sheng
		  inner join city on sheng.s_id=city.cfather_id 
		  inner join xian on city.c_id=xian.xfather_id;
	2.外连接
		1.左连接
			1.以左表为主显示查询结果
			2.select字段名from
			  表1 left join 表2 on 条件
			  left join 表3 on 条件;

		2.右连接
			1.以右表为主显示查询结果
			2.select字段名from
			  表1 right join 表2 on 条件
			  right join 表3 on 条件;
6.数据备份(mysqldump,在Linux终端中操作)
	1.命令格式
		mysqldump -u用户名 -p 源库名 > ~/***.sql
	2.源库名的表示方式
		--all-databases		备份所有库
		库名			备份单个库
		-B 库1 库2 库3		备份多个库
		库名 表1 表2 表3	备份指定库的多张表
7.数据恢复
	1.命令格式(Linux终端)
		mysql -uroot -p 目标库名 < ***.sql
	2.从所有库备份中恢复某一个库(--one-database)
		mysql -uroot -p --one-database 目标库名 < all.sql
	注意:
		1.恢复库时如果恢复到原库会将表中数据覆盖,新增表不会删除
		2.数据恢复时如果恢复的库不存在,则必须先创建空库
8.MySQL的用户账户管理
	1.开启MySQL远程连接
		1.sudo -i
		2.cd /etc/mysql/mysql.conf.d/
		3.subl mysqld.cnf
			#bind-address = 127.0.0.1
		4./etc/init.d/mysql restart
	2.添加授权用户
		1.用root用户登录mysql
			mysql -uroot -p123456
		2.授权
			grant 权限列表 on 库.表 to "用户名"@"%" identitied by "密码" with grant option;
			
			权限列表:all privileges、select、insert
				 库.表: *.* 所有库的所有表
		
1.存储引擎(处理表的处理器)
	1.基本操作
		1.查看所有的存储引擎
		mysql> show engines;
		2.查看已有表的存储引擎
		mysql> show create table 表名;
		3.创建表指定
		create table 表名(...)engine=myisam;
		4.已有表
		alter table 表名 engine=innodb;
	2.锁
		1.目的:解决客户端并发访问的冲突问题
		2.锁分类
			1.锁类型
				1.读锁(共享锁)
					select:加读锁之后别人不能更改表记录,但可以进行查询
				2.写锁(互斥锁、排他锁)
					insert、delete、update
					加写锁之后别人不能查、不能改
			2.锁粒度
				1.表级锁:myisam
				2.行级锁:innodb
	3.常用的存储引擎特点
		1.InnoDB特点
			1.共享表空间
				表名.frm :表结构和索引文件
				表名.ibd :表记录
			2.支持行级锁
			3.支持外键、事务操作
		2.MyISAM特点
			1.独享表空间
			表名.frm :表结构
			表名.myd :表记录 mydata
			表名.myi :索引文件 myindex
			2.支持表级锁
	4.如何决定使用哪个存储引擎
		1.执行查询操作多的表用MyISAM(使用InnoDB浪费资源)
		2.执行写操作多的表用InnoDB
2.mysql调优
	1.选择合适的存储引擎
	2.创建索引
	  在select、where、order by常涉及到字段建立索引
	3.SQL语句的优化
	  1.where子句中不使用 != ,否则放弃索引全表扫描
	  2.尽量避免 NULL 值判断,否则放弃索引全表扫描
		优化前:select number from t1 where number is null;
		优化后:
		  在number列上设置默认值0,确保number列无NULL值
		  select number from t1 where number=0;
	  3.尽量避免 or 连接条件,否则放弃索引全表扫描
		优化前:select id from t1 where id=10 or id=20;
		优化后:
		  select id from t1 where id=10
		  union all
		  select id from t1 where id=20;
	  4.模糊查询尽量避免使用前置%,否则全表扫描
	  5.尽量避免使用in 和 not in,否则全表扫描
	    select id from t1 where id in(1,2,3,4);
	    select id from t1 where id between 1 and 4;
	  6.尽量避免使用 select * ...;用具体字段代替*,不要返回用不到的任何字段
3.事务和事务回滚
	1.定义:一件事从开始发生到结束的整个过程
	2.作用:确保数据一致性
	3.事务和事务回滚应用
	  1.MySQL中sql命令会自动commit到数据库
	    show variables like "autocommit";
	  2.事务应用
	    1.开启事务
		mysql> brgin;
		mysql> ...一条或多条SQL语句
			##此时autocommit被禁用
	    2.终止事务
		mysql> commit; | rollback;
4.mysql与python交互
	1.交互类型
		1.python3
		  模块名:pymysql
		  安装:在线:sudo pip3 install pymysql
		       离线:pymysql-0.7.11.tar.gz
		       $ tar -zxvf pymysql-0.7.11.tar.gz
		       $ cd pymysql-0.7.11
		       $ sudo python3 setup.py install
		2.Python2
		  模块名:MySQLdb
		  安装:sudo pip install mysql-python
	2.pymysql使用流程
		1.建立数据库连接(db = pymysql.connect(...))
		2.创建游标对象(c = db.cursor())
		3.游标方法:c.execute("insert ...")
		4.提交到数据库:db.commit()
		5.关闭游标对象:c.close()
		6.断开数据库连接:db.close()
	3.connect对象
		1.db = pymysql.connect(参数列表)
		  1. host:主机地址,本地localhost
		  2. port:端口号,默认3306
		  3. user:用户名
		  4. password:密码
		  5. database:库
		  6. charset:编码方式,推荐使用utf8
		2.数据库连接对象(db)的方法
		  1. db.close()关闭连接
		  2. db.commit()提交到数据库执行
		  3. db.rollback()回滚
		  4. cur = db.cursor()返回游标对象,用于执行SQL命令
		3.游标对象(cur)的方法
		  1. cur.execute(SQL命令,[参数])执行SQL命令
		  2. cur.close()关闭游标对象
		  3. cur.fetchone()获取查询结果集的第一条数据	(记录)
		  4. cur.fetchmany()获取n条			((记录1),(记录2),...)
		  5. cur.fetchall()获取所有记录			((记录1),(记录2),...)


sha1
7c4a8d09ca3762af61e59520943dc26494f8941b


5.orm(Object Relation Mapping 对象关系映射)
	1.定义
	  把对象模型映射到MySQL数据库中